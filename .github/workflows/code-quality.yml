name: Code Quality Metrics

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install code quality tools
        run: make quality-tools

      - name: Run code quality report
        id: quality
        run: |
          # Run quality report and save output
          make quality-report > quality_output.txt 2>&1 || true

          # Extract metrics from output
          total_funcs=$(grep -oP 'Total functions: \K\d+' quality_output.txt | head -1 || echo 0)
          high_complexity=$(grep -oP 'High complexity.*?: \K\d+' quality_output.txt | head -1 || echo 0)
          high_cognit=$(grep -oP 'High cognitive complexity.*?: \K\d+' quality_output.txt | head -1 || echo 0)

          # Check for duplication
          if grep -q "Found.*clone groups" quality_output.txt; then
            dupl_count=$(grep -oP 'Found \K\d+(?= clone groups)' quality_output.txt || echo 0)
          else
            dupl_count=0
          fi

          # Store metrics for later use
          echo "total_funcs=$total_funcs" >> $GITHUB_OUTPUT
          echo "high_complexity=$high_complexity" >> $GITHUB_OUTPUT
          echo "high_cognit=$high_cognit" >> $GITHUB_OUTPUT
          echo "dupl_count=$dupl_count" >> $GITHUB_OUTPUT

          # Generate markdown reports
          echo "# Cyclomatic Complexity Report" > cyclo_report.md
          echo "" >> cyclo_report.md
          echo "**Total Functions**: $total_funcs" >> cyclo_report.md
          echo "**High Complexity (>15)**: $high_complexity" >> cyclo_report.md
          echo "" >> cyclo_report.md
          echo "### Top 10 Most Complex Functions" >> cyclo_report.md
          echo "\`\`\`" >> cyclo_report.md
          sed -n '/üìä Cyclomatic Complexity:/,/^$/p' quality_output.txt | tail -n +3 | head -10 >> cyclo_report.md
          echo "\`\`\`" >> cyclo_report.md

          echo "# Cognitive Complexity Report" > cognit_report.md
          echo "" >> cognit_report.md
          echo "**Total Functions**: $total_funcs" >> cognit_report.md
          echo "**High Cognitive Complexity (>20)**: $high_cognit" >> cognit_report.md
          echo "" >> cognit_report.md
          echo "### Top 10 Functions (Cognitive)" >> cognit_report.md
          echo "\`\`\`" >> cognit_report.md
          sed -n '/üß† Cognitive Complexity:/,/^$/p' quality_output.txt | tail -n +3 | head -10 >> cognit_report.md
          echo "\`\`\`" >> cognit_report.md

          echo "# Code Duplication Report" > dupl_report.md
          echo "" >> dupl_report.md
          if [ "$dupl_count" -eq 0 ]; then
            echo "‚úÖ **No significant code duplication detected** (threshold: 50 tokens)" >> dupl_report.md
          else
            echo "‚ö†Ô∏è **Found $dupl_count clone groups of duplicated code**" >> dupl_report.md
            echo "" >> dupl_report.md
            echo "<details>" >> dupl_report.md
            echo "<summary>View Duplication Details</summary>" >> dupl_report.md
            echo "" >> dupl_report.md
            echo "\`\`\`" >> dupl_report.md
            sed -n '/üîÑ Code Duplication:/,$p' quality_output.txt | head -30 >> dupl_report.md
            echo "\`\`\`" >> dupl_report.md
            echo "</details>" >> dupl_report.md
          fi

          echo "dupl_count=$dupl_count" >> $GITHUB_OUTPUT

      - name: Generate Quality Score
        id: score
        run: |
          total_funcs=${{ steps.quality.outputs.total_funcs }}
          high_complexity=${{ steps.quality.outputs.high_complexity }}
          high_cognit=${{ steps.quality.outputs.high_cognit }}
          dupl_count=${{ steps.quality.outputs.dupl_count }}

          # Calculate quality score (0-100)
          # Start with 100, deduct points for issues
          score=100

          if [ $total_funcs -gt 0 ]; then
            # Deduct for high cyclomatic complexity (max 30 points)
            complexity_ratio=$((high_complexity * 100 / total_funcs))
            complexity_penalty=$((complexity_ratio * 30 / 100))
            score=$((score - complexity_penalty))

            # Deduct for high cognitive complexity (max 30 points)
            cognit_ratio=$((high_cognit * 100 / total_funcs))
            cognit_penalty=$((cognit_ratio * 30 / 100))
            score=$((score - cognit_penalty))
          fi

          # Deduct for duplication (max 20 points)
          if [ $dupl_count -gt 0 ]; then
            dupl_penalty=$((dupl_count > 20 ? 20 : dupl_count))
            score=$((score - dupl_penalty))
          fi

          # Ensure score is between 0-100
          if [ $score -lt 0 ]; then
            score=0
          fi

          echo "quality_score=$score" >> $GITHUB_OUTPUT

          # Determine grade
          if [ $score -ge 90 ]; then
            grade="A"
            emoji="üéâ"
          elif [ $score -ge 80 ]; then
            grade="B"
            emoji="‚úÖ"
          elif [ $score -ge 70 ]; then
            grade="C"
            emoji="‚ö†Ô∏è"
          elif [ $score -ge 60 ]; then
            grade="D"
            emoji="‚ö†Ô∏è"
          else
            grade="F"
            emoji="‚ùå"
          fi

          echo "grade=$grade" >> $GITHUB_OUTPUT
          echo "emoji=$emoji" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const cycloReport = fs.readFileSync('cyclo_report.md', 'utf8');
            const cognitReport = fs.readFileSync('cognit_report.md', 'utf8');
            const duplReport = fs.readFileSync('dupl_report.md', 'utf8');

            const totalFuncs = ${{ steps.quality.outputs.total_funcs }};
            const highComplexity = ${{ steps.quality.outputs.high_complexity }};
            const highCognit = ${{ steps.quality.outputs.high_cognit }};
            const duplCount = ${{ steps.quality.outputs.dupl_count }};
            const qualityScore = ${{ steps.score.outputs.quality_score }};
            const grade = '${{ steps.score.outputs.grade }}';
            const emoji = '${{ steps.score.outputs.emoji }}';

            const complexityPercent = totalFuncs > 0 ? ((highComplexity / totalFuncs) * 100).toFixed(1) : 0;
            const cognitPercent = totalFuncs > 0 ? ((highCognit / totalFuncs) * 100).toFixed(1) : 0;

            const body = `## ${emoji} Code Quality Report - Grade ${grade} (${qualityScore}/100)

            ### üìä Metrics Summary

            | Metric | Value | Threshold | Status |
            |--------|-------|-----------|--------|
            | **Cyclomatic Complexity** | ${highComplexity}/${totalFuncs} (${complexityPercent}%) | ‚â§15 | ${highComplexity === 0 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | **Cognitive Complexity** | ${highCognit}/${totalFuncs} (${cognitPercent}%) | ‚â§20 | ${highCognit === 0 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | **Code Duplication** | ${duplCount} instances | 0 | ${duplCount === 0 ? '‚úÖ' : '‚ö†Ô∏è'} |

            ---

            <details>
            <summary>üìà Cyclomatic Complexity Details</summary>

            ${cycloReport}

            </details>

            <details>
            <summary>üß† Cognitive Complexity Details</summary>

            ${cognitReport}

            </details>

            <details>
            <summary>üîÑ Code Duplication Details</summary>

            ${duplReport}

            </details>

            ---

            <sub>Quality Score: Based on complexity ratios and duplication. Target: A grade (90+)</sub>`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Code Quality Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
