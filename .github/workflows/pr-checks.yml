name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # PR title validation
  pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            hyperion
            adapter
            viper
            zap
            gorm
            otel
            ristretto
            redis
            gin
            grpc
            docs
            ci
            deps
          requireScope: false

  # Check for large files
  check-size:
    name: Check File Sizes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for large files
        run: make check-large-files

  # Check commit messages
  commit-lint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: make lint-commits

  # Check for merge conflicts
  check-conflicts:
    name: Check Merge Conflicts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for conflict markers
        run: make check-conflicts

  # Code coverage comparison
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests with coverage (monorepo)
        run: |
          # Discover all modules dynamically from go.work
          modules=$(go list -m -f '{{.Dir}}' | sed "s|$(pwd)/||")

          # Run tests for all modules and aggregate coverage
          total_coverage=0
          module_count=0

          for module in $modules; do
            if [ -d "$module" ] && [ -f "$module/go.mod" ]; then
              echo "Testing $module..."
              (cd "$module" && go test -v -coverprofile=coverage.out -covermode=atomic ./...) || {
                echo "Tests failed for $module"
                exit 1
              }

              if [ -f "$module/coverage.out" ]; then
                coverage=$(cd "$module" && go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
                echo "$module coverage: $coverage%"
                total_coverage=$(echo "$total_coverage + $coverage" | bc)
                module_count=$((module_count + 1))
              fi
            fi
          done

          # Calculate average coverage
          if [ $module_count -gt 0 ]; then
            pr_coverage=$(echo "scale=2; $total_coverage / $module_count" | bc)
          else
            pr_coverage=0
          fi

          echo "Average PR Coverage: $pr_coverage%"
          echo "pr_coverage=$pr_coverage" >> $GITHUB_ENV

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = process.env.pr_coverage;
            const threshold = 80;
            const emoji = coverage >= threshold ? '✅' : '⚠️';

            const body = `## ${emoji} Test Coverage Report

            **Coverage**: ${coverage}%
            **Threshold**: ${threshold}%
            **Status**: ${coverage >= threshold ? 'PASS' : 'BELOW THRESHOLD'}

            ${coverage >= threshold ?
              'Great job! Coverage meets the required threshold.' :
              `⚠️ Coverage is below the ${threshold}% threshold. Please add more tests.`
            }`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Label based on changes
  auto-label:
    name: Auto Label
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label PR based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
