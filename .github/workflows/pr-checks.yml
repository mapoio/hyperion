name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # PR title validation
  pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            hyperion
            adapter
            viper
            zap
            gorm
            otel
            ristretto
            redis
            gin
            grpc
            docs
            ci
            deps
            context
          requireScope: false

  # Check for large files
  check-size:
    name: Check File Sizes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for large files
        run: make check-large-files

  # Check commit messages
  commit-lint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: make lint-commits

  # Check for merge conflicts
  check-conflicts:
    name: Check Merge Conflicts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for conflict markers
        run: make check-conflicts

  # Code coverage comparison
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests with coverage (monorepo)
        run: |
          # Discover all modules dynamically from go.work
          # Exclude example/* directories from coverage checks
          modules=$(go list -m -f '{{.Dir}}' | sed "s|$(pwd)/||" | grep -v "^example/")

          # Coverage threshold
          THRESHOLD=80

          # Initialize coverage tracking
          total_coverage=0
          module_count=0
          failed_modules=""
          all_passed=true

          # Create coverage report file
          echo "# Module Coverage Details" > coverage_details.md
          echo "" >> coverage_details.md
          echo "| Module | Coverage | Status |" >> coverage_details.md
          echo "|--------|----------|--------|" >> coverage_details.md

          # Test each module and collect coverage
          for module in $modules; do
            if [ -d "$module" ] && [ -f "$module/go.mod" ]; then
              echo "Testing $module..."

              # Run tests with coverage
              if (cd "$module" && go test -v -race -coverprofile=coverage.out -covermode=atomic ./...); then
                if [ -f "$module/coverage.out" ]; then
                  coverage=$(cd "$module" && go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')

                  # Determine status emoji
                  if (( $(echo "$coverage >= $THRESHOLD" | bc -l) )); then
                    status="‚úÖ PASS"
                  else
                    status="‚ùå FAIL"
                    failed_modules="$failed_modules\n- $module: ${coverage}% (< ${THRESHOLD}%)"
                    all_passed=false
                  fi

                  echo "| \`$module\` | ${coverage}% | $status |" >> coverage_details.md

                  total_coverage=$(echo "$total_coverage + $coverage" | bc)
                  module_count=$((module_count + 1))

                  # Export module coverage as env var (sanitize module name)
                  module_name=$(echo "$module" | tr '/' '_' | tr '-' '_')
                  echo "coverage_${module_name}=$coverage" >> $GITHUB_ENV
                else
                  echo "| \`$module\` | N/A | ‚ö†Ô∏è No coverage data |" >> coverage_details.md
                fi
              else
                echo "| \`$module\` | N/A | ‚ùå Tests failed |" >> coverage_details.md
                all_passed=false
                exit 1
              fi
            fi
          done

          # Calculate overall average
          if [ $module_count -gt 0 ]; then
            overall_coverage=$(echo "scale=2; $total_coverage / $module_count" | bc)
          else
            overall_coverage=0
          fi

          echo "overall_coverage=$overall_coverage" >> $GITHUB_ENV
          echo "module_count=$module_count" >> $GITHUB_ENV
          echo "all_passed=$all_passed" >> $GITHUB_ENV
          echo "failed_modules=$failed_modules" >> $GITHUB_ENV
          echo "threshold=$THRESHOLD" >> $GITHUB_ENV

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageDetails = fs.readFileSync('coverage_details.md', 'utf8');

            const overallCoverage = parseFloat(process.env.overall_coverage);
            const threshold = parseInt(process.env.threshold);
            const moduleCount = parseInt(process.env.module_count);
            const allPassed = process.env.all_passed === 'true';
            const failedModules = process.env.failed_modules;

            const overallEmoji = overallCoverage >= threshold ? '‚úÖ' : '‚ö†Ô∏è';
            const statusEmoji = allPassed ? '‚úÖ' : '‚ùå';

            let body = `## ${statusEmoji} Test Coverage Report

            ### üìä Overall Coverage: ${overallCoverage.toFixed(2)}% ${overallEmoji}

            **Threshold**: ${threshold}%
            **Modules Tested**: ${moduleCount}
            **Status**: ${allPassed ? '‚úÖ All modules meet threshold' : '‚ùå Some modules below threshold'}

            ---

            ### Module Coverage Details

            ${coverageDetails}

            ---
            `;

            if (!allPassed && failedModules) {
              body += `
            ### ‚ö†Ô∏è Modules Below Threshold

            The following modules need more test coverage:
            ${failedModules}

            Please add tests to bring these modules to at least ${threshold}% coverage.
            `;
            } else {
              body += `
            ### üéâ Great Job!

            All modules meet or exceed the ${threshold}% coverage threshold.
            `;
            }

            body += `
            <sub>Note: Each module must independently meet the ${threshold}% threshold.</sub>`;

            // Find and update/create comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Test Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

            // Fail the check if any module is below threshold
            if (!allPassed) {
              core.setFailed(`Some modules have coverage below ${threshold}% threshold`);
            }

  # Label based on changes
  auto-label:
    name: Auto Label
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label PR based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
