name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # PR title validation
  pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest

    steps:
      - name: Check PR title format
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            hyperconfig
            hyperlog
            hyperdb
            hypercache
            hyperctx
            hyperweb
            hypergrpc
            hyperhttp
            hyperstore
            hypercrypto
            hypererror
            hypervalidator
            hyperion
          requireScope: false

  # Check for large files
  check-size:
    name: Check File Sizes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for large files
        run: |
          large_files=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./vendor/*")
          if [ -n "$large_files" ]; then
            echo "❌ Large files detected (>1MB):"
            echo "$large_files"
            exit 1
          fi
          echo "✅ No large files detected"

  # Check commit messages
  commit-lint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          # Get all commits in this PR (exclude merge commits)
          commits=$(git log --format=%s --no-merges origin/main..HEAD)

          # Simple validation - check for conventional commit format
          while IFS= read -r commit; do
            # Skip empty lines
            [ -z "$commit" ] && continue

            if ! echo "$commit" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+'; then
              echo "❌ Invalid commit message: $commit"
              echo "Expected format: type(scope): description"
              exit 1
            fi
          done <<< "$commits"

          echo "✅ All commit messages are valid"

  # Check for merge conflicts
  check-conflicts:
    name: Check Merge Conflicts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for conflict markers
        run: |
          CONFLICT_START="<""<""<""<""<""<""< HEAD"
          CONFLICT_MID="=""=""=""=""=""=""="
          CONFLICT_END=">">">">">">"">"
          conflicts=$(grep -rE "($CONFLICT_START|$CONFLICT_MID|$CONFLICT_END)" . --exclude-dir=.git --exclude-dir=vendor || true)
          if [ -n "$conflicts" ]; then
            echo "❌ Merge conflict markers detected:"
            echo "$conflicts"
            exit 1
          fi
          echo "✅ No merge conflicts detected"

  # Code coverage comparison
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage-pr.out -covermode=atomic ./...
          pr_coverage=$(go tool cover -func=coverage-pr.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "PR Coverage: $pr_coverage%"
          echo "pr_coverage=$pr_coverage" >> $GITHUB_ENV

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = process.env.pr_coverage;
            const threshold = 80;
            const emoji = coverage >= threshold ? '✅' : '⚠️';

            const body = `## ${emoji} Test Coverage Report

            **Coverage**: ${coverage}%
            **Threshold**: ${threshold}%
            **Status**: ${coverage >= threshold ? 'PASS' : 'BELOW THRESHOLD'}

            ${coverage >= threshold ?
              'Great job! Coverage meets the required threshold.' :
              `⚠️ Coverage is below the ${threshold}% threshold. Please add more tests.`
            }`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Label based on changes
  auto-label:
    name: Auto Label
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label PR based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
