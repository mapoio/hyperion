name: CI

on:
  push:
    branches: [ main, develop, feature/*, refactor/* ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: read

env:
  # Workspace modules (keep in sync with Makefile)
  MODULES: "hyperion adapter/viper"

jobs:
  # Test job - runs tests with coverage across all modules
  test:
    name: Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']  # v2.0 requires Go 1.24 for workspace support

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.work.sum
            hyperion/go.sum
            adapter/viper/go.sum

      - name: Verify Go workspace
        run: make check-workspace

      - name: Download and verify dependencies
        run: make mod-verify

      - name: Run tests with coverage
        run: make ci-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./hyperion/coverage.out,./adapter/viper/coverage.out
          flags: unittests
          name: codecov-umbrella

  # Lint job - runs code quality checks across all modules
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run golangci-lint (hyperion)
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61
          working-directory: hyperion
          args: --config=../.golangci.yml --timeout=10m

      - name: Run golangci-lint (adapter/viper)
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61
          working-directory: adapter/viper
          args: --config=../../.golangci.yml --timeout=10m

      - name: Check code formatting
        run: make check-format

  # Build job - verifies all modules build
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Build all modules
        run: make build

  # Security scan across all modules
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run security scans
        run: |
          # Run security scan and generate SARIF for GitHub
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          for module in hyperion adapter/viper; do
            echo "Security scanning $module..."
            (cd $module && gosec -no-fail -fmt sarif -out ../results-$(basename $module).sarif ./...)
          done

      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results-hyperion.sarif

  # Dependency check across all modules
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Check for vulnerable dependencies
        continue-on-error: true
        run: make vuln-check

  # Format check - ensures code is properly formatted
  format:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install formatting tools
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Check code formatting
        run: make check-format

  # Status check - all jobs must pass
  ci-success:
    name: CI Success
    if: always()
    needs: [test, lint, build, security, dependencies, format]
    runs-on: ubuntu-latest

    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.dependencies.result }}" != "success" ] || \
             [ "${{ needs.format.result }}" != "success" ]; then
            echo "❌ CI failed"
            exit 1
          fi
          echo "✅ All CI checks passed"
