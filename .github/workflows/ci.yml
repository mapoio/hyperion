name: CI

on:
  push:
    branches: [ main, develop, feature/*, refactor/* ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: read

env:
  # Workspace modules (keep in sync with Makefile)
  MODULES: "hyperion adapter/viper"

jobs:
  # Test job - runs tests with coverage across all modules
  test:
    name: Test (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']  # v2.0 requires Go 1.24 for workspace support

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.work.sum
            hyperion/go.sum
            adapter/viper/go.sum

      - name: Verify Go workspace
        run: |
          echo "Verifying Go workspace configuration..."
          go work sync
          cat go.work

      - name: Download dependencies
        run: |
          echo "Downloading dependencies for all modules..."
          for module in $MODULES; do
            echo "Downloading dependencies for $module..."
            (cd $module && go mod download && go mod verify) || exit 1
          done

      - name: Run tests with coverage
        run: |
          echo "Running tests across all modules..."
          for module in $MODULES; do
            echo "Testing $module..."
            (cd $module && go test -v -race -coverprofile=coverage.out -covermode=atomic ./...) || exit 1
          done

      - name: Generate coverage reports
        run: |
          echo "Generating coverage reports..."
          for module in $MODULES; do
            if [ -f $module/coverage.out ]; then
              echo "Coverage for $module:"
              (cd $module && go tool cover -func=coverage.out)
            fi
          done

      - name: Check coverage threshold
        run: |
          echo "Checking coverage threshold (80%)..."
          for module in $MODULES; do
            if [ -f $module/coverage.out ]; then
              coverage=$(cd $module && go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
              echo "$module coverage: $coverage%"
              if (( $(echo "$coverage < 80" | bc -l) )); then
                echo "❌ $module coverage $coverage% is below threshold 80%"
                exit 1
              fi
            fi
          done
          echo "✅ All modules meet coverage threshold"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./hyperion/coverage.out,./adapter/viper/coverage.out
          flags: unittests
          name: codecov-umbrella

  # Lint job - runs code quality checks across all modules
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m
          working-directory: hyperion

      - name: Run golangci-lint on adapter/viper
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m
          working-directory: adapter/viper

  # Build job - verifies all modules build
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Build all modules
        run: |
          echo "Building all modules..."
          for module in $MODULES; do
            echo "Building $module..."
            (cd $module && go build -v ./...) || exit 1
          done
          echo "✅ All builds complete"

  # Security scan across all modules
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          for module in $MODULES; do
            echo "Security scanning $module..."
            (cd $module && gosec -no-fail -fmt sarif -out ../results-$(basename $module).sarif ./...)
          done

      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results-hyperion.sarif

  # Dependency check across all modules
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Check for vulnerable dependencies
        continue-on-error: true
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          for module in $MODULES; do
            echo "Checking vulnerabilities in $module..."
            (cd $module && govulncheck ./...)
          done

  # Format check - ensures code is properly formatted
  format:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Check code formatting
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          for module in $MODULES; do
            echo "Checking format for $module..."
            unformatted=$(cd $module && gofmt -l .)
            if [ -n "$unformatted" ]; then
              echo "❌ The following files are not formatted:"
              echo "$unformatted"
              exit 1
            fi
          done
          echo "✅ All code is properly formatted"

  # Status check - all jobs must pass
  ci-success:
    name: CI Success
    if: always()
    needs: [test, lint, build, security, dependencies, format]
    runs-on: ubuntu-latest

    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.dependencies.result }}" != "success" ] || \
             [ "${{ needs.format.result }}" != "success" ]; then
            echo "❌ CI failed"
            exit 1
          fi
          echo "✅ All CI checks passed"
